/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;

/**
 * Dialogframes for showing messages or asking questions
 *
 * @author Robin
 *
 */
public class Dialog {

    private static Response btnPressed;
    //Knop die ingedrukt is
    private static Image Information = new Image(Main.class.getResourceAsStream("/images/icons/Information.png"));
    private static Image Question = new Image(Main.class.getResourceAsStream("/images/icons/Question.png"));
    private static Image iTitle = (new Image(Main.class.getResourceAsStream("/images/icons/iTitle_icon.png")));
    private static Image qTitle = (new Image(Main.class.getResourceAsStream("/images/icons/qTitle_icon.png")));
    //Static zodat images slechts een maal moeten ingeladen worden en niet voor elk dialoogvenster opnieuw

    /**
     * Used to contain the response of a dialogframe. Possibilities are NO, YES
     * or CLOSED
     */
    public enum Response {

        NO, YES, CLOSED
    };

    /**
     * Show a confirmation-dialog
     *
     * @param owner the parent of the dialog-window
     * @param message the message that's displayed in the dialog-window
     * @param title the title of the dialog-window
     * @return Response generated by clicking on one of the dialog-buttons
     */
    public static Response showConfirmationDialog(Stage owner, String message, String title) {
        buildConfirmationDialog(owner, message, title);
        Response answer = btnPressed;
        btnPressed = null;              //Niet echt nodig om terug op null te zetten
        return answer;
    }

    /**
     * Show a message-dialog
     *
     * @param owner the parent of the dialog-window
     * @param message the message that's displayed in the dialog-window
     * @param title the title of the dialog-window
     */
    public static void showMessageDialog(Stage owner, String message, String title) {
        buildMessageDialog(owner, message, title);
    }

    /**
     * Initializes the dialog-window
     *
     * @param owner the parent of the dialog-window
     * @param title the title of the dialog-window
     * @return initialized stage
     */
    private static Stage initializeWindow(Stage owner, String title) {
        Stage window = new Stage();
        window.initStyle(StageStyle.UTILITY);                   //Minimaliseren verwijderd
        window.getIcons().add(qTitle);                          //Wordt niet getoond in UTILITY-stijl, is overbodig
        window.setTitle(title);                                 //Wordt niet getoond in UTILITY-stijl, is overbodig
        window.setResizable(false);                             //Maakt wijzigen grootte venster onmogelijk
        window.initOwner(owner);
        window.initModality(Modality.APPLICATION_MODAL);        //blokkeert invoer naar achtergrondapplicatie

        return window;
    }

    /**
     * Builds the Confirmation-dialog
     *
     * @param owner the parent of the dialog-window
     * @param message the message that's displayed in the dialog-window
     * @param title the title of the dialog-window
     * @return Response generated by clicking on one of the dialog-buttons
     */
    private static Response buildConfirmationDialog(Stage owner, String message, String title) {
        final Stage dialog = initializeWindow(owner, title);
        btnPressed = Response.CLOSED;
        //Als er wordt afgesloten zonder op YES of NO te klikken, is er sowieso op het close-knopje gedruk

        //Bevat YES- and NO-knop
        FlowPane buttons = new FlowPane(10, 10);
        buttons.setAlignment(Pos.CENTER);
        Button yes = new Button("Yes");
        Button no = new Button("No");
        buttons.getChildren().addAll(yes, no);

        //Vraagteken-icoon
        ImageView question = new ImageView(Question);
        question.setFitHeight(60);
        question.setFitWidth(60);
        question.fitWidthProperty();

        //Gestelde vraag
        VBox msg = new VBox();
        msg.getChildren().addAll(new Label(message));
        msg.setAlignment(Pos.CENTER);

        //Vraagteken-icoon en vraag
        HBox hBox = new HBox();
        hBox.getChildren().addAll(question, msg);
        hBox.setAlignment(Pos.TOP_CENTER);
        hBox.setSpacing(10);

        //Gehele inhoud venster
        VBox vBox = new VBox();
        vBox.setAlignment(Pos.CENTER);
        vBox.setSpacing(10);
        vBox.getChildren().addAll(hBox, buttons);
        vBox.setPadding(new Insets(10));

        //Juiste response geven naargelang ingedrukte knop en sluiten dialoogvenster
        yes.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent t) {
                btnPressed = Response.YES;
                dialog.close();
            }
        });

        no.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent t) {
                btnPressed = Response.NO;
                dialog.close();
            }
        });

        Scene s = new Scene(vBox);
        dialog.setScene(s);
        dialog.sizeToScene();
        //dialog.centerOnScreen();
        dialog.showAndWait();           //Wachten tot venster is gesloten

        return btnPressed;
    }

    /**
     * Builds the Message-dialog
     *
     * @param owner the parent of the dialog-window
     * @param message the message that's displayed in the dialog-window
     * @param title the title of the dialog-window
     * @return Response generated by clicking on one of the dialog-buttons
     */
    private static void buildMessageDialog(Stage owner, String message, String title) {
        //Zelfde opbouw als ConfirmationDialog, maar ander icoontje en andere knopjes
        final Stage dialog = initializeWindow(owner, title);

        FlowPane buttons = new FlowPane(10, 10);
        buttons.setAlignment(Pos.CENTER);
        Button ok = new Button("Ok");
        buttons.getChildren().addAll(ok);

        ImageView information = new ImageView(Information);
        information.setFitHeight(60);
        information.setFitWidth(60);

        VBox msg = new VBox();
        msg.getChildren().addAll(new Label(message));
        msg.setAlignment(Pos.CENTER);

        HBox hBox = new HBox();
        hBox.getChildren().addAll(information, msg);
        hBox.setAlignment(Pos.TOP_CENTER);
        hBox.setSpacing(10);

        VBox vBox = new VBox();
        vBox.setAlignment(Pos.CENTER);
        vBox.setSpacing(10);
        vBox.getChildren().addAll(hBox, buttons);
        vBox.setPadding(new Insets(10));

        ok.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent t) {
                dialog.close();
            }
        });

        Scene s = new Scene(vBox);
        dialog.setScene(s);
        dialog.sizeToScene();
        //dialog.centerOnScreen();
        dialog.showAndWait();
    }
}
